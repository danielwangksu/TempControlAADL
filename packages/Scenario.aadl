package Scenario
public
	with Processes, Devices;
	
system LabControl
end LabControl;

system implementation LabControl.imp
	subcomponents
		controllerA : system Scenario::ControllerA.imp;
		controllerB : system Scenario::ControllerB.imp;
		eth: bus Devices::ethernet;
	connections
		a_e : port controllerA.outgoing -> eth.incomingA;
		e_a : port eth.outgoingA -> controllerA.incoming;
		b_e : port controllerB.outgoing -> eth.incomingB;
		e_b : port eth.outgoingB -> controllerB.incoming;
end LabControl.imp;
	
system ControllerA
	features
		incoming : in data port;
		outgoing : out data port;
end ControllerA;

system implementation ControllerA.imp
  	subcomponents
  	-- processes		
		tempConProc : process Processes::TempControlProcess.imp;
		webInterface : process Processes::WebInterface.imp;
		netServer: process Processes::NetServer.imp;
	-- proxies
		tempSenProxy_A : process Processes::tempSensorProxy.imp;
		alarmActProxy_A : process Processes::AlarmProxy.imp;
		fanActProxy_A : process Processes::FanProxy.imp;
		tempConProxy_A : process Processes::TempControlProxy_A.imp;
  	-- devices
	connections
	-- inter-process communication
		t_t : port tempSenProxy_A.current_temp -> tempConProc.current_temp;
		t_a : port tempConProc.alarm_cmd -> alarmActProxy_A.alarm_cmd_forward;
		a_t : port alarmActProxy_A.alarm_ack -> tempConProc.alarm_ack;
		t_f : port tempConProc.fan_cmd -> fanActProxy_A.fan_cmd_forward;
		f_t : port fanActProxy_A.fan_ack -> tempConProc.fan_ack;
		w_tcp : port webInterface.desired_temp -> tempConProxy_A.desired_temp_forward;
		tcp_t : port tempConProxy_A.desired_temp -> tempConProc.desired_temp;
		t_tcp: port tempConProc.desired_temp_ack -> tempConProxy_A.desired_temp_ack_foward;
		tcp_w: port tempConProxy_A.desired_temp_ack -> webInterface.desired_temp_ack;
		s_tcp : port tempConProc.status -> tempConProxy_A.status_forward;
		tcp_s : port tempConProxy_A.status -> webInterface.status;
		
		net_t : port netServer.out_socket -> tempSenProxy_A.current_temp_forward;
		c_net : port alarmActProxy_A.alarm_cmd -> netServer.in_socket;
		nt_c : port netServer.out_socket -> alarmActProxy_A.alarm_ack_forward;
		f_net : port fanActProxy_A.fan_cmd -> netServer.in_socket;
		net_f : port netServer.out_socket -> fanActProxy_A.fan_ack_forward;
  		-- network
		n_c : port netServer.outgoing -> outgoing;
		c_n : port incoming -> netServer.incoming;
end ControllerA.imp;

system ControllerB
	features
		incoming : in data port;
		outgoing : out data port;
end ControllerB;

system implementation ControllerB.imp
	subcomponents
	-- processes
		fanActProc : process Processes::FanProcess.imp;
		tempSenProc : process Processes::TempSensorProcess.imp;
		alarmActProc : process Processes::AlarmProcess.imp;
		netServer: process Processes::NetServer.imp;
	-- proxies
		tempConProxy_B : process Processes::TempControlProxy_B.imp;
	-- devices
		alarm : device Devices::Alarm;
		fan : device Devices::Fan;
		tempSensor : device Devices::TempSensor;
	connections
	-- inter-process communication
		t_t : port tempSenProc.current_temp -> tempConProxy_B.current_temp_forward;
		t_f : port tempConProxy_B.fan_cmd -> fanActProc.fan_cmd;
		f_t : port fanActProc.fan_ack -> tempConProxy_B.fan_ack_forward;
		t_a : port tempConProxy_B.alarm_cmd -> alarmActProc.alarm_cmd;
		a_t : port alarmActProc.alarm_ack -> tempConProxy_B.alarm_ack_forward;
		
		t_net : port tempConProxy_B.current_temp -> netServer.in_socket;
		net_tf : port netServer.out_socket -> tempConProxy_B.fan_cmd_forward;
		tf_net : port tempConProxy_B.fan_ack -> netServer.in_socket;
		net_ta : port netServer.out_socket -> tempConProxy_B.alarm_cmd_forward;
		ta_net : port tempConProxy_B.alarm_ack -> netServer.in_socket;
	-- network
		n_c : port netServer.outgoing -> outgoing;
		c_n : port incoming -> netServer.incoming;
	-- process to sensors/actuators
		a_t_a : port alarmActProc.alarm_out -> alarm.alarm_control;
		t_t_t : port fanActProc.fan_out -> fan.fan_control;
		s_t_s :	port tempSensor.sensor_data -> tempSenProc.sensor_input;
end ControllerB.imp;

end Scenario;